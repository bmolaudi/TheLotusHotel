{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mpho\\\\Desktop\\\\AOD\\\\Informatics Project\\\\lotus.zip (1)\\\\src\\\\components\\\\admin\\\\report\\\\UsersByDevice.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, FormSelect, Card, CardHeader, CardBody, CardFooter } from \"shards-react\";\nimport { firestore } from '../../../config/firebaseConfig';\nimport Chart from \"./chart\";\n\nclass UsersByDevice extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rooms: [],\n      data: []\n    };\n\n    this.componentDidMount = async () => {\n      const roomsFS = await firestore.collection(\"rooms\").get();\n      const rooms = [];\n      roomsFS.forEach(room => {\n        const newRoomId = room.data().addedRoom;\n        const title = newRoomId.title;\n        rooms.push(title);\n      });\n      console.log(rooms);\n      this.setState({\n        rooms: rooms\n      });\n      const chartConfig = {\n        type: \"bar\",\n        data: {\n          datasets: [{\n            hoverBorderColor: \"#ffffff\",\n            data: [68.3, 24.2, 7.5],\n            backgroundColor: [\"rgba(0,123,255,0.9)\", \"rgba(0,123,255,0.5)\", \"rgba(0,123,255,0.3)\"]\n          }],\n          labels: rooms\n        },\n        options: { ...{\n            legend: {\n              position: \"bottom\",\n              labels: {\n                padding: 25,\n                boxWidth: 20\n              }\n            },\n            cutoutPercentage: 0,\n            tooltips: {\n              custom: false,\n              mode: \"index\",\n              position: \"nearest\"\n            }\n          },\n          ...this.props.chartOptions\n        }\n      };\n      new Chart(this.canvasRef.current, chartConfig);\n    };\n\n    this.canvasRef = React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Card, {\n      small: true,\n      className: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      className: \"border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, \"Room Popularity\")), /*#__PURE__*/React.createElement(CardBody, {\n      className: \"d-flex py-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      height: \"220\",\n      ref: this.canvasRef,\n      className: \"blog-users-by-device m-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nUsersByDevice.propTypes = {\n  /**\n   * The component's title.\n   */\n  title: \"rooms\",\n\n  /**\n   * The chart config object.\n   */\n  chartConfig: PropTypes.object,\n\n  /**\n   * The Chart.js options.\n   */\n  chartOptions: PropTypes.object,\n\n  /**\n   * The chart data.\n   */\n  chartData: PropTypes.object\n};\nexport default UsersByDevice;","map":{"version":3,"sources":["C:/Users/Mpho/Desktop/AOD/Informatics Project/lotus.zip (1)/src/components/admin/report/UsersByDevice.js"],"names":["React","PropTypes","Row","Col","FormSelect","Card","CardHeader","CardBody","CardFooter","firestore","Chart","UsersByDevice","Component","constructor","props","state","rooms","data","componentDidMount","roomsFS","collection","get","forEach","room","newRoomId","addedRoom","title","push","console","log","setState","chartConfig","type","datasets","hoverBorderColor","backgroundColor","labels","options","legend","position","padding","boxWidth","cutoutPercentage","tooltips","custom","mode","chartOptions","canvasRef","current","createRef","render","propTypes","object","chartData"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Row,\n  Col,\n  FormSelect,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter\n} from \"shards-react\";\nimport {firestore} from '../../../config/firebaseConfig'\nimport Chart from \"./chart\";\n\nclass UsersByDevice extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  state = {\n    rooms: [],\n    data:[],\n}\n\ncomponentDidMount = async () => {\n    const roomsFS = await firestore.collection(\"rooms\").get();\n        const rooms = [];\n\n        roomsFS.forEach(room => {\n                const newRoomId = room.data().addedRoom;\n                const title = newRoomId.title;\n                rooms.push(title);\n        });\n        console.log(rooms);\n        this.setState({ rooms: rooms })\n    const chartConfig = {\n      type: \"bar\",\n      data:  {\n        datasets: [\n          {\n            hoverBorderColor: \"#ffffff\",\n            data: [68.3, 24.2, 7.5],\n            backgroundColor: [\n              \"rgba(0,123,255,0.9)\",\n              \"rgba(0,123,255,0.5)\",\n              \"rgba(0,123,255,0.3)\"\n            ]\n          }\n        ],\n        labels: rooms\n      },\n      options: {\n        ...{\n          legend: {\n            position: \"bottom\",\n            labels: {\n              padding: 25,\n              boxWidth: 20\n            }\n          },\n          cutoutPercentage: 0,\n          tooltips: {\n            custom: false,\n            mode: \"index\",\n            position: \"nearest\"\n          }\n        },\n        ...this.props.chartOptions\n      },\n    };\n\n    new Chart(this.canvasRef.current, chartConfig);\n  }\n\n  render() {\n    return (\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0\">Room Popularity</h6>\n        </CardHeader>\n        <CardBody className=\"d-flex py-0\">\n          <canvas\n            height=\"220\"\n            ref={this.canvasRef}\n            className=\"blog-users-by-device m-auto\"\n          />\n        </CardBody>\n        {/* <CardFooter className=\"border-top\">\n          <Row>\n            <Col>\n              <FormSelect\n                size=\"sm\"\n                value=\"last-week\"\n                style={{ maxWidth: \"130px\" }}\n                onChange={() => {}}\n              >\n                <option value=\"last-week\">Last Week</option>\n                <option value=\"today\">Today</option>\n                <option value=\"last-month\">Last Month</option>\n                <option value=\"last-year\">Last Year</option>\n              </FormSelect>\n            </Col>\n            <Col className=\"text-right view-report\">\n              <a href=\"#\">View full report &rarr;</a>\n            </Col>\n          </Row>\n        </CardFooter> */}\n      </Card>\n    );\n  }\n}\n\nUsersByDevice.propTypes = {\n  /**\n   * The component's title.\n   */\n  title: \"rooms\",\n  /**\n   * The chart config object.\n   */\n  chartConfig: PropTypes.object,\n  /**\n   * The Chart.js options.\n   */\n  chartOptions: PropTypes.object,\n  /**\n   * The chart data.\n   */\n  chartData: PropTypes.object\n};\n\nexport default UsersByDevice;\n"]},"metadata":{},"sourceType":"module"}