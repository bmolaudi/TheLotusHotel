{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const bookingTypeSlice = createSlice({\n  name: 'booking',\n  initialState: {\n    booking: null\n  },\n  reducers: {\n    setBooking: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.booking = action.payload.booking;\n    }\n  }\n});\nexport const {\n  setBooking\n} = bookingTypeSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectuserType = state => state.booking.booking;\nexport default bookingTypeSlice.reducer;","map":{"version":3,"sources":["C:/Users/Mpho/Desktop/AOD/Informatics Project/lotus.zip (1)/src/store/reducers/bookingSlice.js"],"names":["createSlice","bookingTypeSlice","name","initialState","booking","reducers","setBooking","state","action","payload","actions","selectuserType","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,gBAAgB,GAAGD,WAAW,CAAC;AAC1CE,EAAAA,IAAI,EAAE,SADoC;AAE1CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE;AADG,GAF4B;AAK1CC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACC,OAAP,CAAeL,OAA/B;AACD;AAPO;AALgC,CAAD,CAApC;AAgBP,OAAO,MAAM;AAAEE,EAAAA;AAAF,IAAiBL,gBAAgB,CAACS,OAAxC,C,CAGP;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGJ,KAAK,IAAIA,KAAK,CAACH,OAAN,CAAcA,OAA9C;AAEP,eAAeH,gBAAgB,CAACW,OAAhC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const bookingTypeSlice = createSlice({\r\n  name: 'booking',\r\n  initialState: {\r\n    booking: null\r\n  },\r\n  reducers: {\r\n    setBooking: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.booking = action.payload.booking;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setBooking } = bookingTypeSlice.actions;\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectuserType = state => state.booking.booking;\r\n\r\nexport default bookingTypeSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}