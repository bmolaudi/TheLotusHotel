{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const userTypeSlice = createSlice({\n  name: 'date',\n  initialState: {\n    userType: \"guest\"\n  },\n  reducers: {\n    setUserType: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.userType = action.payload.userType;\n    }\n  }\n});\nexport const {\n  setUserType\n} = userTypeSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectuserType = state => state.userType;\nexport default userTypeSlice.reducer;","map":{"version":3,"sources":["C:/Users/Mpho/Desktop/AOD/Informatics Project/lotus.zip (1)/src/store/reducers/userTypeSlice.js"],"names":["createSlice","userTypeSlice","name","initialState","userType","reducers","setUserType","state","action","payload","actions","selectuserType","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGD,WAAW,CAAC;AACvCE,EAAAA,IAAI,EAAE,MADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AADE,GAFyB;AAKvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACH,QAAN,GAAiBI,MAAM,CAACC,OAAP,CAAeL,QAAhC;AACD;AAPO;AAL6B,CAAD,CAAjC;AAgBP,OAAO,MAAM;AAAEE,EAAAA;AAAF,IAAkBL,aAAa,CAACS,OAAtC,C,CAGP;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGJ,KAAK,IAAIA,KAAK,CAACH,QAAtC;AAEP,eAAeH,aAAa,CAACW,OAA7B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userTypeSlice = createSlice({\r\n  name: 'date',\r\n  initialState: {\r\n    userType: \"guest\"\r\n  },\r\n  reducers: {\r\n    setUserType: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.userType = action.payload.userType;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setUserType } = userTypeSlice.actions;\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectuserType = state => state.userType;\r\n\r\nexport default userTypeSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}