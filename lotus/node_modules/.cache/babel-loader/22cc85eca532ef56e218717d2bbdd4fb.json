{"ast":null,"code":"import { firestore } from './firebaseConfig';\nexport async function updateUser(id, firstname, lastname, email, initials, userType) {\n  if (!email) return;\n  const createdAt = new Date();\n  firestore.collection(\"/user\").doc(`${id}`).set({\n    firstname,\n    lastname,\n    email,\n    initials,\n    userType\n  }).then(function () {\n    console.log(\"Document successfully editted!\");\n  }).catch(function (error) {\n    console.error(\"Error writing document: \", error);\n  });\n}\nexport async function addUser(firstname, lastname, email, initials, userType) {\n  if (!email) return;\n  const createdAt = new Date();\n  const uid = createdAt.toISOString();\n  console.log(uid);\n  firestore.collection(\"/user\").doc(`${uid}`).set({\n    firstname,\n    lastname,\n    email,\n    initials,\n    userType\n  }).then(function () {\n    console.log(\"Document successfully written!\");\n  }).catch(function (error) {\n    console.error(\"Error writing document: \", error);\n  });\n}\nexport async function deleteUser(uid) {\n  if (!uid) return;\n  firestore.collection(\"/user\").doc(`${uid}`).delete().then(function () {\n    console.log(\"Document successfully deleted!\");\n  }).catch(function (error) {\n    console.error(\"Error removing document: \", error);\n  });\n}\nexport async function getUserDetails() {\n  try {\n    const snapshot = await firestore.collection('/user').get();\n    console.log(snapshot);\n    return snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"sources":["C:/Users/Mpho/Desktop/AOD/Informatics Project/lotus.zip (1)/src/config/firebaseManageUser.js"],"names":["firestore","updateUser","id","firstname","lastname","email","initials","userType","createdAt","Date","collection","doc","set","then","console","log","catch","error","addUser","uid","toISOString","deleteUser","delete","getUserDetails","snapshot","get","docs","map","data","e"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,kBAAxB;AAEA,OAAO,eAAeC,UAAf,CAA4BC,EAA5B,EAAgCC,SAAhC,EAA2CC,QAA3C,EAAqDC,KAArD,EAA4DC,QAA5D,EAAsEC,QAAtE,EAAiF;AACpF,MAAI,CAACF,KAAL,EAAY;AACZ,QAAMG,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACAT,EAAAA,SAAS,CAACU,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAmC,GAAET,EAAG,EAAxC,EAA2CU,GAA3C,CAA+C;AAC3CT,IAAAA,SAD2C;AAE3CC,IAAAA,QAF2C;AAG3CC,IAAAA,KAH2C;AAI3CC,IAAAA,QAJ2C;AAK3CC,IAAAA;AAL2C,GAA/C,EAOCM,IAPD,CAOM,YAAW;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH,GATD,EAUCC,KAVD,CAUO,UAASC,KAAT,EAAgB;AACnBH,IAAAA,OAAO,CAACG,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACH,GAZD;AAaD;AAEH,OAAO,eAAeC,OAAf,CAAwBf,SAAxB,EAAmCC,QAAnC,EAA6CC,KAA7C,EAAoDC,QAApD,EAA8DC,QAA9D,EAAyE;AAC5E,MAAI,CAACF,KAAL,EAAY;AACZ,QAAMG,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACA,QAAMU,GAAG,GAAGX,SAAS,CAACY,WAAV,EAAZ;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAnB,EAAAA,SAAS,CAACU,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAmC,GAAEQ,GAAI,EAAzC,EAA4CP,GAA5C,CAAgD;AAC5CT,IAAAA,SAD4C;AAE5CC,IAAAA,QAF4C;AAG5CC,IAAAA,KAH4C;AAI5CC,IAAAA,QAJ4C;AAK5CC,IAAAA;AAL4C,GAAhD,EAOCM,IAPD,CAOM,YAAW;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH,GATD,EAUCC,KAVD,CAUO,UAASC,KAAT,EAAgB;AACnBH,IAAAA,OAAO,CAACG,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACH,GAZD;AAaD;AAED,OAAO,eAAeI,UAAf,CAA2BF,GAA3B,EAAgC;AACrC,MAAI,CAACA,GAAL,EAAU;AACVnB,EAAAA,SAAS,CAACU,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAmC,GAAEQ,GAAI,EAAzC,EAA4CG,MAA5C,GAAqDT,IAArD,CAA0D,YAAW;AACjEC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH,GAFD,EAEGC,KAFH,CAES,UAASC,KAAT,EAAgB;AACrBH,IAAAA,OAAO,CAACG,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACH,GAJD;AAKD;AAED,OAAO,eAAeM,cAAf,GAAgC;AACrC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMxB,SAAS,CAACU,UAAV,CAAqB,OAArB,EACtBe,GADsB,EAAvB;AAEAX,IAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AACA,WAAOA,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBhB,GAAG,KAAK;AAC7BT,MAAAA,EAAE,EAAES,GAAG,CAACT,EADqB;AAE7B,SAAGS,GAAG,CAACiB,IAAJ;AAF0B,KAAL,CAArB,CAAP;AAGH,GAPD,CAQA,OAAOC,CAAP,EAAU;AACNf,IAAAA,OAAO,CAACC,GAAR,CAAYc,CAAZ;AAEH;AAEF","sourcesContent":["import {firestore} from './firebaseConfig';\r\n\r\nexport async function updateUser ( id, firstname, lastname, email, initials, userType)  {\r\n    if (!email) return;\r\n    const createdAt = new Date();\r\n    firestore.collection(\"/user\").doc(`${id}`).set({\r\n        firstname,\r\n        lastname,\r\n        email,\r\n        initials,\r\n        userType,\r\n    })\r\n    .then(function() {\r\n        console.log(\"Document successfully editted!\");\r\n    })\r\n    .catch(function(error) {\r\n        console.error(\"Error writing document: \", error);\r\n    })\r\n  }\r\n  \r\nexport async function addUser (firstname, lastname, email, initials, userType)  {\r\n    if (!email) return;\r\n    const createdAt = new Date();\r\n    const uid = createdAt.toISOString();\r\n    console.log(uid);\r\n    firestore.collection(\"/user\").doc(`${uid}`).set({\r\n        firstname,\r\n        lastname,\r\n        email,\r\n        initials,\r\n        userType,\r\n    })\r\n    .then(function() {\r\n        console.log(\"Document successfully written!\");\r\n    })\r\n    .catch(function(error) {\r\n        console.error(\"Error writing document: \", error);\r\n    })\r\n  }\r\n  \r\n  export async function deleteUser (uid) {\r\n    if (!uid) return;\r\n    firestore.collection(\"/user\").doc(`${uid}`).delete().then(function() {\r\n        console.log(\"Document successfully deleted!\");\r\n    }).catch(function(error) {\r\n        console.error(\"Error removing document: \", error);\r\n    });\r\n  }\r\n  \r\n  export async function getUserDetails() {\r\n    try {\r\n        const snapshot = await firestore.collection('/user')\r\n        .get();\r\n        console.log(snapshot)\r\n        return snapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            ...doc.data()}));\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n  \r\n    }\r\n  \r\n  }"]},"metadata":{},"sourceType":"module"}